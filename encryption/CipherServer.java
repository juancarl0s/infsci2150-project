import java.io.*;
import java.net.*;
import java.security.*;
import javax.crypto.*;

public class CipherServer
{
	public static void main(String[] args) throws Exception
	{
		int port = 7999;
		ServerSocket server = new ServerSocket(port);
		Socket s = server.accept();

		// Make the server wait for client to start
		System.out.println("Start the client, then come back and press enter");
		System.in.read();

		// YOU NEED TO DO THESE STEPS:
		// -Read the key from the file generated by the client.
		ObjectInputStream in = new ObjectInputStream(new FileInputStream("KeyFile.xx"));

		Key key = null;

		key = (Key) in.readObject();

		in.close();

		// -Use the key to decrypt the incoming message from socket s.
		Cipher dcipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
		dcipher.init(Cipher.DECRYPT_MODE, key);

		CipherInputStream dcipherIn = new CipherInputStream(s.getInputStream(), dcipher);

		ByteArrayOutputStream os = new ByteArrayOutputStream();

		File file = new File("KeyFile.xx");

		byte[] buf = new byte[(int) file.length()];
		// System.out.println("array length: " + buf.length);

		String finalMessage = "";

		try {
			while ((dcipherIn.read(buf)) >= 0) {

				os.write(buf);
				String message = new String(buf, "UTF-8");
				// System.out.println("Message: " + message);

				finalMessage = finalMessage + message;
				// System.out.println("Message: " + finalMessage);

				buf = new byte[buf.length];
			}

		os.close();

		dcipherIn.close();

		in.close();

		s.close();

		}catch (Exception e)
    	{
    		e.printStackTrace();
    	}

		// -Print out the decrypt String to see if it matches the orignal message.
		System.out.println("Message: " + finalMessage);

		System.exit(0);
	}
}
